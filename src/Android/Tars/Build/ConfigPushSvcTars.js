"use strict";
// **********************************************************************
// Parsed By TarsParser(1.2.0), Generated By tars2node(20200315)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "ConfigPushSvc.tars" by Structure Mode
// **********************************************************************
exports.__esModule = true;
exports.ConfigPushSvcTars = void 0;
/* tslint:disable */
/* eslint-disable */
/// <reference types="node" />
var assert = require("assert");
var TarsStream = require("@tars/stream");
var _hasOwnProperty = Object.prototype.hasOwnProperty;
var ConfigPushSvcTars;
(function (ConfigPushSvcTars) {
    var PushReq = /** @class */ (function () {
        function PushReq() {
            this.Type = 0;
            this.Buff = new TarsStream.BinBuffer;
            this.Seq = 0;
            this._proto_struct_name_ = "";
            this._classname = "ConfigPushSvcTars.PushReq";
        }
        PushReq._write = function (os, tag, val) { os.writeStruct(tag, val); };
        PushReq._read = function (is, tag, def) { return is.readStruct(tag, true, def); };
        PushReq._readFrom = function (is) {
            var tmp = new PushReq;
            tmp.Type = is.readInt32(1, true, 0);
            tmp.Buff = is.readBytes(2, true, TarsStream.BinBuffer);
            tmp.Seq = is.readInt64(3, true, 0);
            return tmp;
        };
        PushReq.prototype._writeTo = function (os) {
            os.writeInt32(1, this.Type);
            os.writeBytes(2, this.Buff);
            os.writeInt64(3, this.Seq);
        };
        PushReq.prototype._equal = function () {
            assert.fail("this structure not define key operation");
        };
        PushReq.prototype._genKey = function () {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        };
        PushReq.prototype.toObject = function () {
            return {
                Type: this.Type,
                Buff: this.Buff.toObject(),
                Seq: this.Seq
            };
        };
        PushReq.prototype.readFromObject = function (json) {
            _hasOwnProperty.call(json, "Type") && (this.Type = json.Type);
            _hasOwnProperty.call(json, "Buff") && (this.Buff.readFromObject(json.Buff));
            _hasOwnProperty.call(json, "Seq") && (this.Seq = json.Seq);
            return this;
        };
        PushReq.prototype.toBinBuffer = function () {
            var os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        };
        PushReq["new"] = function () {
            return new PushReq();
        };
        PushReq.create = function (is) {
            return ConfigPushSvcTars.PushReq._readFrom(is);
        };
        PushReq._classname = "ConfigPushSvcTars.PushReq";
        return PushReq;
    }());
    ConfigPushSvcTars.PushReq = PushReq;
    var FileStorageServerListInfo = /** @class */ (function () {
        function FileStorageServerListInfo() {
            this.Ip = "";
            this.Port = 0;
            this._proto_struct_name_ = "";
            this._classname = "ConfigPushSvcTars.FileStorageServerListInfo";
        }
        FileStorageServerListInfo._write = function (os, tag, val) { os.writeStruct(tag, val); };
        FileStorageServerListInfo._read = function (is, tag, def) { return is.readStruct(tag, true, def); };
        FileStorageServerListInfo._readFrom = function (is) {
            var tmp = new FileStorageServerListInfo;
            tmp.Ip = is.readString(1, false, "");
            tmp.Port = is.readInt32(2, true, 0);
            return tmp;
        };
        FileStorageServerListInfo.prototype._writeTo = function (os) {
            os.writeString(1, this.Ip);
            os.writeInt32(2, this.Port);
        };
        FileStorageServerListInfo.prototype._equal = function () {
            assert.fail("this structure not define key operation");
        };
        FileStorageServerListInfo.prototype._genKey = function () {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        };
        FileStorageServerListInfo.prototype.toObject = function () {
            return {
                Ip: this.Ip,
                Port: this.Port
            };
        };
        FileStorageServerListInfo.prototype.readFromObject = function (json) {
            _hasOwnProperty.call(json, "Ip") && (this.Ip = json.Ip);
            _hasOwnProperty.call(json, "Port") && (this.Port = json.Port);
            return this;
        };
        FileStorageServerListInfo.prototype.toBinBuffer = function () {
            var os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        };
        FileStorageServerListInfo["new"] = function () {
            return new FileStorageServerListInfo();
        };
        FileStorageServerListInfo.create = function (is) {
            return ConfigPushSvcTars.FileStorageServerListInfo._readFrom(is);
        };
        FileStorageServerListInfo._classname = "ConfigPushSvcTars.FileStorageServerListInfo";
        return FileStorageServerListInfo;
    }());
    ConfigPushSvcTars.FileStorageServerListInfo = FileStorageServerListInfo;
    var BigDataIpInfo = /** @class */ (function () {
        function BigDataIpInfo() {
            this.Type = 0;
            this.Ip = "";
            this.Port = 0;
            this._proto_struct_name_ = "";
            this._classname = "ConfigPushSvcTars.BigDataIpInfo";
        }
        BigDataIpInfo._write = function (os, tag, val) { os.writeStruct(tag, val); };
        BigDataIpInfo._read = function (is, tag, def) { return is.readStruct(tag, true, def); };
        BigDataIpInfo._readFrom = function (is) {
            var tmp = new BigDataIpInfo;
            tmp.Type = is.readInt64(0, false, 0);
            tmp.Ip = is.readString(1, true, "");
            tmp.Port = is.readInt64(2, true, 0);
            return tmp;
        };
        BigDataIpInfo.prototype._writeTo = function (os) {
            os.writeInt64(0, this.Type);
            os.writeString(1, this.Ip);
            os.writeInt64(2, this.Port);
        };
        BigDataIpInfo.prototype._equal = function () {
            assert.fail("this structure not define key operation");
        };
        BigDataIpInfo.prototype._genKey = function () {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        };
        BigDataIpInfo.prototype.toObject = function () {
            return {
                Type: this.Type,
                Ip: this.Ip,
                Port: this.Port
            };
        };
        BigDataIpInfo.prototype.readFromObject = function (json) {
            _hasOwnProperty.call(json, "Type") && (this.Type = json.Type);
            _hasOwnProperty.call(json, "Ip") && (this.Ip = json.Ip);
            _hasOwnProperty.call(json, "Port") && (this.Port = json.Port);
            return this;
        };
        BigDataIpInfo.prototype.toBinBuffer = function () {
            var os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        };
        BigDataIpInfo["new"] = function () {
            return new BigDataIpInfo();
        };
        BigDataIpInfo.create = function (is) {
            return ConfigPushSvcTars.BigDataIpInfo._readFrom(is);
        };
        BigDataIpInfo._classname = "ConfigPushSvcTars.BigDataIpInfo";
        return BigDataIpInfo;
    }());
    ConfigPushSvcTars.BigDataIpInfo = BigDataIpInfo;
    var NetSegConf = /** @class */ (function () {
        function NetSegConf() {
            this.Uint32NetType = 0;
            this.Uint32Segsize = 0;
            this.Uint32Segnum = 0;
            this.Uint32Curconnnum = 0;
            this._proto_struct_name_ = "";
            this._classname = "ConfigPushSvcTars.NetSegConf";
        }
        NetSegConf._write = function (os, tag, val) { os.writeStruct(tag, val); };
        NetSegConf._read = function (is, tag, def) { return is.readStruct(tag, true, def); };
        NetSegConf._readFrom = function (is) {
            var tmp = new NetSegConf;
            tmp.Uint32NetType = is.readInt64(0, false, 0);
            tmp.Uint32Segsize = is.readInt64(1, false, 0);
            tmp.Uint32Segnum = is.readInt8(2, false, 0);
            tmp.Uint32Curconnnum = is.readInt64(3, false, 0);
            return tmp;
        };
        NetSegConf.prototype._writeTo = function (os) {
            os.writeInt64(0, this.Uint32NetType);
            os.writeInt64(1, this.Uint32Segsize);
            os.writeInt8(2, this.Uint32Segnum);
            os.writeInt64(3, this.Uint32Curconnnum);
        };
        NetSegConf.prototype._equal = function () {
            assert.fail("this structure not define key operation");
        };
        NetSegConf.prototype._genKey = function () {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        };
        NetSegConf.prototype.toObject = function () {
            return {
                Uint32NetType: this.Uint32NetType,
                Uint32Segsize: this.Uint32Segsize,
                Uint32Segnum: this.Uint32Segnum,
                Uint32Curconnnum: this.Uint32Curconnnum
            };
        };
        NetSegConf.prototype.readFromObject = function (json) {
            _hasOwnProperty.call(json, "Uint32NetType") && (this.Uint32NetType = json.Uint32NetType);
            _hasOwnProperty.call(json, "Uint32Segsize") && (this.Uint32Segsize = json.Uint32Segsize);
            _hasOwnProperty.call(json, "Uint32Segnum") && (this.Uint32Segnum = json.Uint32Segnum);
            _hasOwnProperty.call(json, "Uint32Curconnnum") && (this.Uint32Curconnnum = json.Uint32Curconnnum);
            return this;
        };
        NetSegConf.prototype.toBinBuffer = function () {
            var os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        };
        NetSegConf["new"] = function () {
            return new NetSegConf();
        };
        NetSegConf.create = function (is) {
            return ConfigPushSvcTars.NetSegConf._readFrom(is);
        };
        NetSegConf._classname = "ConfigPushSvcTars.NetSegConf";
        return NetSegConf;
    }());
    ConfigPushSvcTars.NetSegConf = NetSegConf;
    var BigDataIpList = /** @class */ (function () {
        function BigDataIpList() {
            this.ServiceType = 0;
            this.Iplist = new TarsStream.List(ConfigPushSvcTars.BigDataIpInfo);
            this.NetSegConfs = new TarsStream.List(ConfigPushSvcTars.NetSegConf);
            this.fragmentSize = 0;
            this._proto_struct_name_ = "";
            this._classname = "ConfigPushSvcTars.BigDataIpList";
        }
        BigDataIpList._write = function (os, tag, val) { os.writeStruct(tag, val); };
        BigDataIpList._read = function (is, tag, def) { return is.readStruct(tag, true, def); };
        BigDataIpList._readFrom = function (is) {
            var tmp = new BigDataIpList;
            tmp.ServiceType = is.readInt64(0, false, 0);
            tmp.Iplist = is.readList(1, false, TarsStream.List(ConfigPushSvcTars.BigDataIpInfo));
            tmp.NetSegConfs = is.readList(2, false, TarsStream.List(ConfigPushSvcTars.NetSegConf));
            tmp.fragmentSize = is.readInt64(3, false, 0);
            return tmp;
        };
        BigDataIpList.prototype._writeTo = function (os) {
            os.writeInt64(0, this.ServiceType);
            os.writeList(1, this.Iplist);
            os.writeList(2, this.NetSegConfs);
            os.writeInt64(3, this.fragmentSize);
        };
        BigDataIpList.prototype._equal = function () {
            assert.fail("this structure not define key operation");
        };
        BigDataIpList.prototype._genKey = function () {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        };
        BigDataIpList.prototype.toObject = function () {
            return {
                ServiceType: this.ServiceType,
                Iplist: this.Iplist.toObject(),
                NetSegConfs: this.NetSegConfs.toObject(),
                fragmentSize: this.fragmentSize
            };
        };
        BigDataIpList.prototype.readFromObject = function (json) {
            _hasOwnProperty.call(json, "ServiceType") && (this.ServiceType = json.ServiceType);
            _hasOwnProperty.call(json, "Iplist") && (this.Iplist.readFromObject(json.Iplist));
            _hasOwnProperty.call(json, "NetSegConfs") && (this.NetSegConfs.readFromObject(json.NetSegConfs));
            _hasOwnProperty.call(json, "fragmentSize") && (this.fragmentSize = json.fragmentSize);
            return this;
        };
        BigDataIpList.prototype.toBinBuffer = function () {
            var os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        };
        BigDataIpList["new"] = function () {
            return new BigDataIpList();
        };
        BigDataIpList.create = function (is) {
            return ConfigPushSvcTars.BigDataIpList._readFrom(is);
        };
        BigDataIpList._classname = "ConfigPushSvcTars.BigDataIpList";
        return BigDataIpList;
    }());
    ConfigPushSvcTars.BigDataIpList = BigDataIpList;
    var BigDataChannel = /** @class */ (function () {
        function BigDataChannel() {
            this.BigdataIplists = new TarsStream.List(ConfigPushSvcTars.BigDataIpList);
            this.BigdataSigSession = new TarsStream.BinBuffer;
            this.BigdataKeySession = new TarsStream.BinBuffer;
            this.SigUin = 0;
            this.ConnectFlag = 0;
            this.BigdataPbBuf = new TarsStream.BinBuffer;
            this._proto_struct_name_ = "";
            this._classname = "ConfigPushSvcTars.BigDataChannel";
        }
        BigDataChannel._write = function (os, tag, val) { os.writeStruct(tag, val); };
        BigDataChannel._read = function (is, tag, def) { return is.readStruct(tag, true, def); };
        BigDataChannel._readFrom = function (is) {
            var tmp = new BigDataChannel;
            tmp.BigdataIplists = is.readList(0, false, TarsStream.List(ConfigPushSvcTars.BigDataIpList));
            tmp.BigdataSigSession = is.readBytes(1, false, TarsStream.BinBuffer);
            tmp.BigdataKeySession = is.readBytes(2, false, TarsStream.BinBuffer);
            tmp.SigUin = is.readInt64(3, false, 0);
            tmp.ConnectFlag = is.readInt32(4, false, 0);
            tmp.BigdataPbBuf = is.readBytes(5, false, TarsStream.BinBuffer);
            return tmp;
        };
        BigDataChannel.prototype._writeTo = function (os) {
            os.writeList(0, this.BigdataIplists);
            os.writeBytes(1, this.BigdataSigSession);
            os.writeBytes(2, this.BigdataKeySession);
            os.writeInt64(3, this.SigUin);
            os.writeInt32(4, this.ConnectFlag);
            os.writeBytes(5, this.BigdataPbBuf);
        };
        BigDataChannel.prototype._equal = function () {
            assert.fail("this structure not define key operation");
        };
        BigDataChannel.prototype._genKey = function () {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        };
        BigDataChannel.prototype.toObject = function () {
            return {
                BigdataIplists: this.BigdataIplists.toObject(),
                BigdataSigSession: this.BigdataSigSession.toObject(),
                BigdataKeySession: this.BigdataKeySession.toObject(),
                SigUin: this.SigUin,
                ConnectFlag: this.ConnectFlag,
                BigdataPbBuf: this.BigdataPbBuf.toObject()
            };
        };
        BigDataChannel.prototype.readFromObject = function (json) {
            _hasOwnProperty.call(json, "BigdataIplists") && (this.BigdataIplists.readFromObject(json.BigdataIplists));
            _hasOwnProperty.call(json, "BigdataSigSession") && (this.BigdataSigSession.readFromObject(json.BigdataSigSession));
            _hasOwnProperty.call(json, "BigdataKeySession") && (this.BigdataKeySession.readFromObject(json.BigdataKeySession));
            _hasOwnProperty.call(json, "SigUin") && (this.SigUin = json.SigUin);
            _hasOwnProperty.call(json, "ConnectFlag") && (this.ConnectFlag = json.ConnectFlag);
            _hasOwnProperty.call(json, "BigdataPbBuf") && (this.BigdataPbBuf.readFromObject(json.BigdataPbBuf));
            return this;
        };
        BigDataChannel.prototype.toBinBuffer = function () {
            var os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        };
        BigDataChannel["new"] = function () {
            return new BigDataChannel();
        };
        BigDataChannel.create = function (is) {
            return ConfigPushSvcTars.BigDataChannel._readFrom(is);
        };
        BigDataChannel._classname = "ConfigPushSvcTars.BigDataChannel";
        return BigDataChannel;
    }());
    ConfigPushSvcTars.BigDataChannel = BigDataChannel;
    var FmtIPInfo = /** @class */ (function () {
        function FmtIPInfo() {
            this.GateIp = "";
            this.GateIpOper = 0;
            this._proto_struct_name_ = "";
            this._classname = "ConfigPushSvcTars.FmtIPInfo";
        }
        FmtIPInfo._write = function (os, tag, val) { os.writeStruct(tag, val); };
        FmtIPInfo._read = function (is, tag, def) { return is.readStruct(tag, true, def); };
        FmtIPInfo._readFrom = function (is) {
            var tmp = new FmtIPInfo;
            tmp.GateIp = is.readString(0, false, "");
            tmp.GateIpOper = is.readInt64(1, false, 0);
            return tmp;
        };
        FmtIPInfo.prototype._writeTo = function (os) {
            os.writeString(0, this.GateIp);
            os.writeInt64(1, this.GateIpOper);
        };
        FmtIPInfo.prototype._equal = function () {
            assert.fail("this structure not define key operation");
        };
        FmtIPInfo.prototype._genKey = function () {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        };
        FmtIPInfo.prototype.toObject = function () {
            return {
                GateIp: this.GateIp,
                GateIpOper: this.GateIpOper
            };
        };
        FmtIPInfo.prototype.readFromObject = function (json) {
            _hasOwnProperty.call(json, "GateIp") && (this.GateIp = json.GateIp);
            _hasOwnProperty.call(json, "GateIpOper") && (this.GateIpOper = json.GateIpOper);
            return this;
        };
        FmtIPInfo.prototype.toBinBuffer = function () {
            var os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        };
        FmtIPInfo["new"] = function () {
            return new FmtIPInfo();
        };
        FmtIPInfo.create = function (is) {
            return ConfigPushSvcTars.FmtIPInfo._readFrom(is);
        };
        FmtIPInfo._classname = "ConfigPushSvcTars.FmtIPInfo";
        return FmtIPInfo;
    }());
    ConfigPushSvcTars.FmtIPInfo = FmtIPInfo;
    var DomainIpInfo = /** @class */ (function () {
        function DomainIpInfo() {
            this.Ip = 0;
            this.Port = 0;
            this._proto_struct_name_ = "";
            this._classname = "ConfigPushSvcTars.DomainIpInfo";
        }
        DomainIpInfo._write = function (os, tag, val) { os.writeStruct(tag, val); };
        DomainIpInfo._read = function (is, tag, def) { return is.readStruct(tag, true, def); };
        DomainIpInfo._readFrom = function (is) {
            var tmp = new DomainIpInfo;
            tmp.Ip = is.readInt32(1, false, 0);
            tmp.Port = is.readInt32(2, true, 0);
            return tmp;
        };
        DomainIpInfo.prototype._writeTo = function (os) {
            os.writeInt32(1, this.Ip);
            os.writeInt32(2, this.Port);
        };
        DomainIpInfo.prototype._equal = function () {
            assert.fail("this structure not define key operation");
        };
        DomainIpInfo.prototype._genKey = function () {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        };
        DomainIpInfo.prototype.toObject = function () {
            return {
                Ip: this.Ip,
                Port: this.Port
            };
        };
        DomainIpInfo.prototype.readFromObject = function (json) {
            _hasOwnProperty.call(json, "Ip") && (this.Ip = json.Ip);
            _hasOwnProperty.call(json, "Port") && (this.Port = json.Port);
            return this;
        };
        DomainIpInfo.prototype.toBinBuffer = function () {
            var os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        };
        DomainIpInfo["new"] = function () {
            return new DomainIpInfo();
        };
        DomainIpInfo.create = function (is) {
            return ConfigPushSvcTars.DomainIpInfo._readFrom(is);
        };
        DomainIpInfo._classname = "ConfigPushSvcTars.DomainIpInfo";
        return DomainIpInfo;
    }());
    ConfigPushSvcTars.DomainIpInfo = DomainIpInfo;
    var DomainIpList = /** @class */ (function () {
        function DomainIpList() {
            this.DomainType = 0;
            this.IpList = new TarsStream.List(ConfigPushSvcTars.DomainIpInfo);
            this.Param = new TarsStream.BinBuffer;
            this.Param2 = 0;
            this._proto_struct_name_ = "";
            this._classname = "ConfigPushSvcTars.DomainIpList";
        }
        DomainIpList._write = function (os, tag, val) { os.writeStruct(tag, val); };
        DomainIpList._read = function (is, tag, def) { return is.readStruct(tag, true, def); };
        DomainIpList._readFrom = function (is) {
            var tmp = new DomainIpList;
            tmp.DomainType = is.readInt32(0, false, 0);
            tmp.IpList = is.readList(1, false, TarsStream.List(ConfigPushSvcTars.DomainIpInfo));
            tmp.Param = is.readBytes(2, false, TarsStream.BinBuffer);
            tmp.Param2 = is.readInt32(4, false, 0);
            return tmp;
        };
        DomainIpList.prototype._writeTo = function (os) {
            os.writeInt32(0, this.DomainType);
            os.writeList(1, this.IpList);
            os.writeBytes(2, this.Param);
            os.writeInt32(4, this.Param2);
        };
        DomainIpList.prototype._equal = function () {
            assert.fail("this structure not define key operation");
        };
        DomainIpList.prototype._genKey = function () {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        };
        DomainIpList.prototype.toObject = function () {
            return {
                DomainType: this.DomainType,
                IpList: this.IpList.toObject(),
                Param: this.Param.toObject(),
                Param2: this.Param2
            };
        };
        DomainIpList.prototype.readFromObject = function (json) {
            _hasOwnProperty.call(json, "DomainType") && (this.DomainType = json.DomainType);
            _hasOwnProperty.call(json, "IpList") && (this.IpList.readFromObject(json.IpList));
            _hasOwnProperty.call(json, "Param") && (this.Param.readFromObject(json.Param));
            _hasOwnProperty.call(json, "Param2") && (this.Param2 = json.Param2);
            return this;
        };
        DomainIpList.prototype.toBinBuffer = function () {
            var os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        };
        DomainIpList["new"] = function () {
            return new DomainIpList();
        };
        DomainIpList.create = function (is) {
            return ConfigPushSvcTars.DomainIpList._readFrom(is);
        };
        DomainIpList._classname = "ConfigPushSvcTars.DomainIpList";
        return DomainIpList;
    }());
    ConfigPushSvcTars.DomainIpList = DomainIpList;
    var DomainIpChannel = /** @class */ (function () {
        function DomainIpChannel() {
            this.DomainIplists = new TarsStream.List(ConfigPushSvcTars.DomainIpList);
            this._proto_struct_name_ = "";
            this._classname = "ConfigPushSvcTars.DomainIpChannel";
        }
        DomainIpChannel._write = function (os, tag, val) { os.writeStruct(tag, val); };
        DomainIpChannel._read = function (is, tag, def) { return is.readStruct(tag, true, def); };
        DomainIpChannel._readFrom = function (is) {
            var tmp = new DomainIpChannel;
            tmp.DomainIplists = is.readList(0, false, TarsStream.List(ConfigPushSvcTars.DomainIpList));
            return tmp;
        };
        DomainIpChannel.prototype._writeTo = function (os) {
            os.writeList(0, this.DomainIplists);
        };
        DomainIpChannel.prototype._equal = function () {
            assert.fail("this structure not define key operation");
        };
        DomainIpChannel.prototype._genKey = function () {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        };
        DomainIpChannel.prototype.toObject = function () {
            return {
                DomainIplists: this.DomainIplists.toObject()
            };
        };
        DomainIpChannel.prototype.readFromObject = function (json) {
            _hasOwnProperty.call(json, "DomainIplists") && (this.DomainIplists.readFromObject(json.DomainIplists));
            return this;
        };
        DomainIpChannel.prototype.toBinBuffer = function () {
            var os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        };
        DomainIpChannel["new"] = function () {
            return new DomainIpChannel();
        };
        DomainIpChannel.create = function (is) {
            return ConfigPushSvcTars.DomainIpChannel._readFrom(is);
        };
        DomainIpChannel._classname = "ConfigPushSvcTars.DomainIpChannel";
        return DomainIpChannel;
    }());
    ConfigPushSvcTars.DomainIpChannel = DomainIpChannel;
})(ConfigPushSvcTars = exports.ConfigPushSvcTars || (exports.ConfigPushSvcTars = {}));
