// **********************************************************************
// Parsed By TarsParser(1.2.0), Generated By tars2node(20200315)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "SvcRegister.tars" by Structure Mode
// **********************************************************************

/* tslint:disable */
/* eslint-disable */

/// <reference types="node" />
import assert = require("assert");
import * as TarsStream from "@tars/stream";

const _hasOwnProperty = Object.prototype.hasOwnProperty;

export namespace Register {
    export class Pack {
        Uin: number = 0;
        Bit: number = 0;
        ConnType: number = 0;
        Other: string = "";
        Status: number = 0;
        OnlinePush: number = 0;
        IsOnline: number = 0;
        IsShowOnline: number = 0;
        KikPc: number = 0;
        KikWeak: number = 0;
        TimeStamp: number = 0;
        OsVersion: number = 0;
        NetType: number = 1;
        BuildVer: string = "";
        ReqType: number = 0;
        Guid: TarsStream.BinBuffer = new TarsStream.BinBuffer;
        LocalId: number = 2052;
        SlienPush: number = 0;
        DevName: string = "";
        DevType: string = "";
        AndroidVersion: string = "";
        OpePush: number = 1;
        LargeSeq: number = 1;
        LastWatchStartTime: number = 0;
        OldSSOIp: number = 0;
        NewSSOIp: number = 0;
        CpId: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "Register.Pack";
        protected static _classname = "Register.Pack";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new Pack;
            tmp.Uin = is.readInt64(0, true, 0);
            tmp.Bit = is.readInt8(1, true, 0);
            tmp.ConnType = is.readInt8(2, true, 0);
            tmp.Other = is.readString(3, true, "");
            tmp.Status = is.readInt8(4, true, 0);
            tmp.OnlinePush = is.readInt8(5, true, 0);
            tmp.IsOnline = is.readInt8(6, true, 0);
            tmp.IsShowOnline = is.readInt8(7, true, 0);
            tmp.KikPc = is.readInt8(8, true, 0);
            tmp.KikWeak = is.readInt8(9, true, 0);
            tmp.TimeStamp = is.readInt64(10, true, 0);
            tmp.OsVersion = is.readInt8(11, true, 0);
            tmp.NetType = is.readInt8(12, true, 1);
            tmp.BuildVer = is.readString(13, true, "");
            tmp.ReqType = is.readInt8(14, true, 0);
            tmp.Guid = is.readBytes(16, true, TarsStream.BinBuffer);
            tmp.LocalId = is.readInt16(17, true, 2052);
            tmp.SlienPush = is.readInt8(18, true, 0);
            tmp.DevName = is.readString(19, true, "");
            tmp.DevType = is.readString(20, true, "");
            tmp.AndroidVersion = is.readString(21, true, "");
            tmp.OpePush = is.readInt8(22, true, 1);
            tmp.LargeSeq = is.readInt8(23, true, 1);
            tmp.LastWatchStartTime = is.readInt64(24, true, 0);
            tmp.OldSSOIp = is.readInt64(26, true, 0);
            tmp.NewSSOIp = is.readInt64(27, true, 0);
            tmp.CpId = is.readInt8(29, true, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt64(0, this.Uin);
            os.writeInt8(1, this.Bit);
            os.writeInt8(2, this.ConnType);
            os.writeString(3, this.Other);
            os.writeInt8(4, this.Status);
            os.writeInt8(5, this.OnlinePush);
            os.writeInt8(6, this.IsOnline);
            os.writeInt8(7, this.IsShowOnline);
            os.writeInt8(8, this.KikPc);
            os.writeInt8(9, this.KikWeak);
            os.writeInt64(10, this.TimeStamp);
            os.writeInt8(11, this.OsVersion);
            os.writeInt8(12, this.NetType);
            os.writeString(13, this.BuildVer);
            os.writeInt8(14, this.ReqType);
            os.writeBytes(16, this.Guid);
            os.writeInt16(17, this.LocalId);
            os.writeInt8(18, this.SlienPush);
            os.writeString(19, this.DevName);
            os.writeString(20, this.DevType);
            os.writeString(21, this.AndroidVersion);
            os.writeInt8(22, this.OpePush);
            os.writeInt8(23, this.LargeSeq);
            os.writeInt64(24, this.LastWatchStartTime);
            os.writeInt64(26, this.OldSSOIp);
            os.writeInt64(27, this.NewSSOIp);
            os.writeInt8(29, this.CpId);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): Pack.Object { 
            return {
                Uin: this.Uin,
                Bit: this.Bit,
                ConnType: this.ConnType,
                Other: this.Other,
                Status: this.Status,
                OnlinePush: this.OnlinePush,
                IsOnline: this.IsOnline,
                IsShowOnline: this.IsShowOnline,
                KikPc: this.KikPc,
                KikWeak: this.KikWeak,
                TimeStamp: this.TimeStamp,
                OsVersion: this.OsVersion,
                NetType: this.NetType,
                BuildVer: this.BuildVer,
                ReqType: this.ReqType,
                Guid: this.Guid.toObject(),
                LocalId: this.LocalId,
                SlienPush: this.SlienPush,
                DevName: this.DevName,
                DevType: this.DevType,
                AndroidVersion: this.AndroidVersion,
                OpePush: this.OpePush,
                LargeSeq: this.LargeSeq,
                LastWatchStartTime: this.LastWatchStartTime,
                OldSSOIp: this.OldSSOIp,
                NewSSOIp: this.NewSSOIp,
                CpId: this.CpId
            };
        }

        readFromObject(json: Pack.Object) { 
            _hasOwnProperty.call(json, "Uin") && (this.Uin = json.Uin);
            _hasOwnProperty.call(json, "Bit") && (this.Bit = json.Bit);
            _hasOwnProperty.call(json, "ConnType") && (this.ConnType = json.ConnType);
            _hasOwnProperty.call(json, "Other") && (this.Other = json.Other);
            _hasOwnProperty.call(json, "Status") && (this.Status = json.Status);
            _hasOwnProperty.call(json, "OnlinePush") && (this.OnlinePush = json.OnlinePush);
            _hasOwnProperty.call(json, "IsOnline") && (this.IsOnline = json.IsOnline);
            _hasOwnProperty.call(json, "IsShowOnline") && (this.IsShowOnline = json.IsShowOnline);
            _hasOwnProperty.call(json, "KikPc") && (this.KikPc = json.KikPc);
            _hasOwnProperty.call(json, "KikWeak") && (this.KikWeak = json.KikWeak);
            _hasOwnProperty.call(json, "TimeStamp") && (this.TimeStamp = json.TimeStamp);
            _hasOwnProperty.call(json, "OsVersion") && (this.OsVersion = json.OsVersion);
            _hasOwnProperty.call(json, "NetType") && (this.NetType = json.NetType);
            _hasOwnProperty.call(json, "BuildVer") && (this.BuildVer = json.BuildVer);
            _hasOwnProperty.call(json, "ReqType") && (this.ReqType = json.ReqType);
            _hasOwnProperty.call(json, "Guid") && (this.Guid.readFromObject(json.Guid));
            _hasOwnProperty.call(json, "LocalId") && (this.LocalId = json.LocalId);
            _hasOwnProperty.call(json, "SlienPush") && (this.SlienPush = json.SlienPush);
            _hasOwnProperty.call(json, "DevName") && (this.DevName = json.DevName);
            _hasOwnProperty.call(json, "DevType") && (this.DevType = json.DevType);
            _hasOwnProperty.call(json, "AndroidVersion") && (this.AndroidVersion = json.AndroidVersion);
            _hasOwnProperty.call(json, "OpePush") && (this.OpePush = json.OpePush);
            _hasOwnProperty.call(json, "LargeSeq") && (this.LargeSeq = json.LargeSeq);
            _hasOwnProperty.call(json, "LastWatchStartTime") && (this.LastWatchStartTime = json.LastWatchStartTime);
            _hasOwnProperty.call(json, "OldSSOIp") && (this.OldSSOIp = json.OldSSOIp);
            _hasOwnProperty.call(json, "NewSSOIp") && (this.NewSSOIp = json.NewSSOIp);
            _hasOwnProperty.call(json, "CpId") && (this.CpId = json.CpId);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new Pack();
        }

        static create(is: TarsStream.TarsInputStream) {
            return Register.Pack._readFrom(is);
        }
    }

    export namespace Pack {
        export interface Object {
            Uin: number;
            Bit: number;
            ConnType: number;
            Other: string;
            Status: number;
            OnlinePush: number;
            IsOnline: number;
            IsShowOnline: number;
            KikPc: number;
            KikWeak: number;
            TimeStamp: number;
            OsVersion: number;
            NetType: number;
            BuildVer: string;
            ReqType: number;
            Guid: Buffer;
            LocalId: number;
            SlienPush: number;
            DevName: string;
            DevType: string;
            AndroidVersion: string;
            OpePush: number;
            LargeSeq: number;
            LastWatchStartTime: number;
            OldSSOIp: number;
            NewSSOIp: number;
            CpId: number;
        }
    }

}


