// **********************************************************************
// Parsed By TarsParser(1.2.0), Generated By tars2node(20200315)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "PublicRecvMapStruct.tars" by Structure Mode
// **********************************************************************

/* tslint:disable */
/* eslint-disable */

/// <reference types="node" />
import assert = require("assert");
import * as TarsStream from "@tars/stream";

const _hasOwnProperty = Object.prototype.hasOwnProperty;

export namespace PublicRecvMapStruct {
    export class Pack {
        Map: TarsStream.Map<string, TarsStream.Map<string, TarsStream.BinBuffer>> = new TarsStream.Map(TarsStream.String, TarsStream.Map(TarsStream.String, TarsStream.BinBuffer));

        protected _proto_struct_name_ = "";
        protected _classname = "PublicRecvMapStruct.Pack";
        protected static _classname = "PublicRecvMapStruct.Pack";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new Pack;
            tmp.Map = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.Map(TarsStream.String, TarsStream.BinBuffer)));
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeMap(0, this.Map);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): Pack.Object { 
            return {
                Map: this.Map.toObject()
            };
        }

        readFromObject(json: Pack.Object) { 
            _hasOwnProperty.call(json, "Map") && (this.Map.readFromObject(json.Map));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new Pack();
        }

        static create(is: TarsStream.TarsInputStream) {
            return PublicRecvMapStruct.Pack._readFrom(is);
        }
    }

    export namespace Pack {
        export interface Object {
            Map: Record<string, Record<string, Buffer>>;
        }
    }

}


